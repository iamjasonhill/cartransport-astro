---
import BaseLayout from '../layouts/BaseLayout.astro';
import fs from 'fs/promises';
import path from 'path';

// This enables static site generation
export const prerender = true;

// Optimize CSS loading
export const getStaticPaths = () => {
  return []; // Disable dynamic route generation for this page
};

// Add critical styles for this route
const criticalStyles = `
  .test-route {
    color: #1f2937;
    max-width: 65ch;
    margin: 0 auto;
  }
  .test-route h1 {
    font-size: 2.25rem;
    font-weight: 700;
    color: #111827;
    margin-bottom: 1.5rem;
  }
  .test-route h2 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #111827;
    margin: 2rem 0 1rem;
  }
  .test-route p {
    margin: 1rem 0;
    line-height: 1.625;
  }
  .test-route .alert {
    padding: 1rem;
    margin-bottom: 1.5rem;
    border-radius: 0.375rem;
  }
  .test-route .alert-error {
    background-color: #fef2f2;
    border: 1px solid #fecaca;
    color: #b91c1c;
  }`;

// Get the current route
const routeParam = 'adelaide-to-sydney';
const fileName = 'adelaide-to-sydney.json';
const contentDir = path.join(process.cwd(), 'src/content/routes');

let content = null;
let error = null;

try {
  // Construct the file path
  const filePath = path.join(contentDir, fileName);
  console.log('Test route - Loading content from:', filePath);
  
  // Read and parse the JSON file
  const fileContent = await fs.readFile(filePath, 'utf-8');
  content = JSON.parse(fileContent);
  
  console.log('Test route - Successfully loaded content for route:', routeParam);
} catch (err) {
  console.error('Test route - Error loading content:', err);
  error = err.message;
}
---

<BaseLayout title="Test Route" description="Test route for debugging">
  <div class="container mx-auto px-4 py-8 test-route">
    <style is:inline>{criticalStyles}</style>
    <h1>Test Route</h1>
    
    {error ? (
      <div class="alert alert-error" role="alert">
        <strong>Error loading content:</strong>
        <span> {error}</span>
      </div>
    ) : null}
    
    {content ? (
      <div>
        <h2>Content for: {content.title}</h2>
        <div class="content">
          <div set:html={content.content} />
        </div>
      </div>
    ) : (
      <p>No content loaded.</p>
    )}
    
    <div class="mt-8 p-4 bg-gray-100 rounded">
      <h3 class="font-bold mb-2">Debug Info:</h3>
      <pre class="text-xs overflow-auto p-4 bg-white rounded">
{JSON.stringify({
  routeParam,
  fileName,
  contentDir,
  fileExists: content ? true : false,
  error: error || 'No error'
}, null, 2)}
      </pre>
    </div>
  </div>
</BaseLayout>
